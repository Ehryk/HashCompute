var fs = require('fs');

var type = process.argv[2];
var language = process.argv[3];
var full = process.argv[4];

var namespace = "Core"
var classname = "Precompiled"

var array = [];
var content = "";
var extension = "";

function generateArray(type)
{
  for(var i = 0; i < 256; i++)
  {
  	array[i] = [];
  	for(var j = 0; j < 256; j++)
  		array[i][j] = getValue(type, i, j);
  }
}

function generateContent(type, language, full) {
	switch(language.toUpperCase())
	{
		case "CSHARP":
		case "CS":
		case "C#":
  			generateCS(type, full);
  			break;

		default:
			throw new Error("Language '{0}' not recognized".format(language));
	}
}

function generateCS(type, full) {
  content = "";
  if (isTrue(full))
  {
  	content += "//Generated by Precompilation/ByteArray.js\n\nnamespace {0}\n{\n    public static partial class {1}\n    {\n".format(namespace, classname);
  }

  content += "{0}public static byte[,] {1} = new byte[256,256] {\n".format(isTrue(full) ? "        " : "", type);
  for(var i = 0; i < array.length; i++)
  {
  	content += "{0}{ ".format(isTrue(full) ? "            " : "    ");
  	for(var j = 0; j < array[i].length; j++)
  	{
  		var lastItem = j == array[j].length - 1;
  		content += "0x{0}{1}".format(getHexByte(array[i][j]), lastItem ? "" : ", ");
  	}
  	var lastItem = i == array[i].length - 1;
  	content += " }{0} //{1}\n".format(lastItem ? "" : ",", i);
  }
  content += "{0}};".format(isTrue(full) ? "        " : "", type);

  if (isTrue(full))
  {
  	content += "\n    }\n}";
  }

  content += "\n\n";
}

function writeToFile() {
  fs.writeFile("{0}_{1}.{2}".format(classname, type, extension), content, function(err) {
    if(err) {
      return console.log(err);
    }
  }); 
}

function getExtension(language) {
  if (language.toLowerCase() == "cs")
  	extension = "cs";
}

function getValue(type, a, b) {
	switch(type.toUpperCase())
	{
		case "XOR":
			return a ^ b;
			
		case "AND":
			return a & b;
			
		case "OR":
			return a | b;

		default:
			throw new Error("Type '{0}' not recognized".format(type));
	}
}

//Helper Functions

function isTrue(value){
  if (typeof(value) == 'string'){
    value = value.toLowerCase();
  }
  switch(value){
    case true:
    case "true":
    case 1:
    case "1":
    case "on":
    case "yes":
      return true;
    default: 
      return false;
  }
}

if (!String.prototype.format) {
  String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) { 
      return typeof args[number] != 'undefined' ? args[number] : match;
    });
  };
}

function pad(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

function getHexByte(value)
{
	return pad(value.toString(16), 2).toUpperCase();
}

generateArray(type);
generateContent(type, language, full);
getExtension(language);
writeToFile(type, extension);
